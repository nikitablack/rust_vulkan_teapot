pub struct TeapotData {
    control_points: Vec<f32>,
    patches: Vec<u16>,
    instances: Vec<f32>,
}

impl TeapotData {
    pub fn new() -> Self {
        let control_points = vec![
            0.2000, 0.0000, 2.70000, 0.2000, -0.1120, 2.70000, 0.1120, -0.2000, 2.70000, 0.0000,
            -0.2000, 2.70000, 1.3375, 0.0000, 2.53125, 1.3375, -0.7490, 2.53125, 0.7490, -1.3375,
            2.53125, 0.0000, -1.3375, 2.53125, 1.4375, 0.0000, 2.53125, 1.4375, -0.8050, 2.53125,
            0.8050, -1.4375, 2.53125, 0.0000, -1.4375, 2.53125, 1.5000, 0.0000, 2.40000, 1.5000,
            -0.8400, 2.40000, 0.8400, -1.5000, 2.40000, 0.0000, -1.5000, 2.40000, 1.7500, 0.0000,
            1.87500, 1.7500, -0.9800, 1.87500, 0.9800, -1.7500, 1.87500, 0.0000, -1.7500, 1.87500,
            2.0000, 0.0000, 1.35000, 2.0000, -1.1200, 1.35000, 1.1200, -2.0000, 1.35000, 0.0000,
            -2.0000, 1.35000, 2.0000, 0.0000, 0.90000, 2.0000, -1.1200, 0.90000, 1.1200, -2.0000,
            0.90000, 0.0000, -2.0000, 0.90000, -2.0000, 0.0000, 0.90000, 2.0000, 0.0000, 0.45000,
            2.0000, -1.1200, 0.45000, 1.1200, -2.0000, 0.45000, 0.0000, -2.0000, 0.45000, 1.5000,
            0.0000, 0.22500, 1.5000, -0.8400, 0.22500, 0.8400, -1.5000, 0.22500, 0.0000, -1.5000,
            0.22500, 1.5000, 0.0000, 0.15000, 1.5000, -0.8400, 0.15000, 0.8400, -1.5000, 0.15000,
            0.0000, -1.5000, 0.15000, -1.6000, 0.0000, 2.02500, -1.6000, -0.3000, 2.02500, -1.5000,
            -0.3000, 2.25000, -1.5000, 0.0000, 2.25000, -2.3000, 0.0000, 2.02500, -2.3000, -0.3000,
            2.02500, -2.5000, -0.3000, 2.25000, -2.5000, 0.0000, 2.25000, -2.7000, 0.0000, 2.02500,
            -2.7000, -0.3000, 2.02500, -3.0000, -0.3000, 2.25000, -3.0000, 0.0000, 2.25000,
            -2.7000, 0.0000, 1.80000, -2.7000, -0.3000, 1.80000, -3.0000, -0.3000, 1.80000,
            -3.0000, 0.0000, 1.80000, -2.7000, 0.0000, 1.57500, -2.7000, -0.3000, 1.57500, -3.0000,
            -0.3000, 1.35000, -3.0000, 0.0000, 1.35000, -2.5000, 0.0000, 1.12500, -2.5000, -0.3000,
            1.12500, -2.6500, -0.3000, 0.93750, -2.6500, 0.0000, 0.93750, -2.0000, -0.3000,
            0.90000, -1.9000, -0.3000, 0.60000, -1.9000, 0.0000, 0.60000, 1.7000, 0.0000, 1.42500,
            1.7000, -0.6600, 1.42500, 1.7000, -0.6600, 0.60000, 1.7000, 0.0000, 0.60000, 2.6000,
            0.0000, 1.42500, 2.6000, -0.6600, 1.42500, 3.1000, -0.6600, 0.82500, 3.1000, 0.0000,
            0.82500, 2.3000, 0.0000, 2.10000, 2.3000, -0.2500, 2.10000, 2.4000, -0.2500, 2.02500,
            2.4000, 0.0000, 2.02500, 2.7000, 0.0000, 2.40000, 2.7000, -0.2500, 2.40000, 3.3000,
            -0.2500, 2.40000, 3.3000, 0.0000, 2.40000, 2.8000, 0.0000, 2.47500, 2.8000, -0.2500,
            2.47500, 3.5250, -0.2500, 2.49375, 3.5250, 0.0000, 2.49375, 2.9000, 0.0000, 2.47500,
            2.9000, -0.1500, 2.47500, 3.4500, -0.1500, 2.51250, 3.4500, 0.0000, 2.51250, 2.8000,
            0.0000, 2.40000, 2.8000, -0.1500, 2.40000, 3.2000, -0.1500, 2.40000, 3.2000, 0.0000,
            2.40000, 0.0000, 0.0000, 3.15000, 0.8000, 0.0000, 3.15000, 0.8000, -0.4500, 3.15000,
            0.4500, -0.8000, 3.15000, 0.0000, -0.8000, 3.15000, 0.0000, 0.0000, 2.85000, 1.4000,
            0.0000, 2.40000, 1.4000, -0.7840, 2.40000, 0.7840, -1.4000, 2.40000, 0.0000, -1.4000,
            2.40000, 0.4000, 0.0000, 2.55000, 0.4000, -0.2240, 2.55000, 0.2240, -0.4000, 2.55000,
            0.0000, -0.4000, 2.55000, 1.3000, 0.0000, 2.55000, 1.3000, -0.7280, 2.55000, 0.7280,
            -1.3000, 2.55000, 0.0000, -1.3000, 2.55000, 1.3000, 0.0000, 2.40000, 1.3000, -0.7280,
            2.40000, 0.7280, -1.3000, 2.40000, 0.0000, -1.3000, 2.40000,
        ];

        let patches = vec![
            // rim
            // 0
            102, 103, 104, 105, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, //
            // 1
            102, 103, 104, 105, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, //
            // 2
            102, 103, 104, 105, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, //
            // 3
            102, 103, 104, 105, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, //
            // body 1
            // 0
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, //
            // 1
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, //
            // 2
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, //
            // 3
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, //
            // body 2
            // 0
            24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, //
            // 1
            24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, //
            // 2
            24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, //
            // 3
            24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, //
            // lid 1
            // 0
            96, 96, 96, 96, 97, 98, 99, 100, 101, 101, 101, 101, 0, 1, 2, 3, //
            // 2
            96, 96, 96, 96, 97, 98, 99, 100, 101, 101, 101, 101, 0, 1, 2, 3, //
            // 3
            96, 96, 96, 96, 97, 98, 99, 100, 101, 101, 101, 101, 0, 1, 2, 3, //
            // 4
            96, 96, 96, 96, 97, 98, 99, 100, 101, 101, 101, 101, 0, 1, 2, 3, //
            // lid 2
            // 0
            0, 1, 2, 3, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, //
            // 2
            0, 1, 2, 3, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, //
            // 3
            0, 1, 2, 3, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, //
            // 4
            0, 1, 2, 3, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, //
            // handle 1
            // 0
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, //
            // 1
            41, 45, 49, 53, 42, 46, 50, 54, 43, 47, 51, 55, 44, 48, 52, 56, //
            // handle 2
            // 0
            53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 28, 65, 66, 67, //
            // 1
            53, 57, 61, 28, 54, 58, 62, 65, 55, 59, 63, 66, 56, 60, 64, 67, //
            // spout 1
            // 0
            68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, //
            // 1
            68, 72, 76, 80, 69, 73, 77, 81, 70, 74, 78, 82, 71, 75, 79, 83, //
            // spout 2
            // 0
            80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, //
            // 1
            80, 84, 88, 92, 81, 85, 89, 93, 82, 86, 90, 94, 83, 87, 91, 95, //
        ];

        let mut instances = vec![];
        // rim instances
        push_identity(&mut instances);
        push_color(&mut instances, 1.0f32, 0.0f32, 0.0f32, 1.0f32);
        push_rotation_z(&mut instances, 90.0f32.to_radians());
        push_color(&mut instances, 0.0f32, 1.0f32, 0.0f32, 1.0f32);
        push_rotation_z(&mut instances, 180.0f32.to_radians());
        push_color(&mut instances, 0.0f32, 0.0f32, 1.0f32, 1.0f32);
        push_rotation_z(&mut instances, 270.0f32.to_radians());
        push_color(&mut instances, 1.0f32, 1.0f32, 0.0f32, 1.0f32);
        // body 1
        push_identity(&mut instances);
        push_color(&mut instances, 0.0f32, 0.0f32, 1.0f32, 1.0f32);
        push_rotation_z(&mut instances, 90.0f32.to_radians());
        push_color(&mut instances, 1.0f32, 0.0f32, 0.0f32, 1.0f32);
        push_rotation_z(&mut instances, 180.0f32.to_radians());
        push_color(&mut instances, 0.0f32, 1.0f32, 0.0f32, 1.0f32);
        push_rotation_z(&mut instances, 270.0f32.to_radians());
        push_color(&mut instances, 0.0f32, 1.0f32, 1.0f32, 1.0f32);
        // body 2
        push_identity(&mut instances);
        push_color(&mut instances, 0.0f32, 1.0f32, 0.0f32, 1.0f32);
        push_rotation_z(&mut instances, 90.0f32.to_radians());
        push_color(&mut instances, 0.0f32, 0.0f32, 1.0f32, 1.0f32);
        push_rotation_z(&mut instances, 180.0f32.to_radians());
        push_color(&mut instances, 1.0f32, 0.0f32, 0.0f32, 1.0f32);
        push_rotation_z(&mut instances, 270.0f32.to_radians());
        push_color(&mut instances, 1.0f32, 0.0f32, 1.0f32, 1.0f32);

        // lid 1
        push_identity(&mut instances);
        push_color(&mut instances, 0.0f32, 1.0f32, 1.0f32, 1.0f32);
        push_rotation_z(&mut instances, 90.0f32.to_radians());
        push_color(&mut instances, 1.0f32, 1.0f32, 0.0f32, 1.0f32);
        push_rotation_z(&mut instances, 180.0f32.to_radians());
        push_color(&mut instances, 1.0f32, 0.0f32, 1.0f32, 1.0f32);
        push_rotation_z(&mut instances, 270.0f32.to_radians());
        push_color(&mut instances, 1.0f32, 0.0f32, 0.0f32, 1.0f32);
        // lid 2
        push_identity(&mut instances);
        push_color(&mut instances, 0.0f32, 0.0f32, 0.0f32, 1.0f32);
        push_rotation_z(&mut instances, 90.0f32.to_radians());
        push_color(&mut instances, 1.0f32, 1.0f32, 1.0f32, 1.0f32);
        push_rotation_z(&mut instances, 180.0f32.to_radians());
        push_color(&mut instances, 0.0f32, 1.0f32, 0.0f32, 1.0f32);
        push_rotation_z(&mut instances, 270.0f32.to_radians());
        push_color(&mut instances, 0.0f32, 0.0f32, 1.0f32, 1.0f32);
        // handle 1
        push_identity(&mut instances);
        push_color(&mut instances, 0.0f32, 0.0f32, 1.0f32, 1.0f32);
        push_scale_y(&mut instances, -1.0f32);
        push_color(&mut instances, 1.0f32, 0.0f32, 0.0f32, 1.0f32);
        // handle 2
        push_identity(&mut instances);
        push_color(&mut instances, 0.0f32, 1.0f32, 0.0f32, 1.0f32);
        push_scale_y(&mut instances, -1.0f32);
        push_color(&mut instances, 1.0f32, 1.0f32, 0.0f32, 1.0f32);
        // spout 1
        push_identity(&mut instances);
        push_color(&mut instances, 1.0f32, 0.0f32, 0.0f32, 1.0f32);
        push_scale_y(&mut instances, -1.0f32);
        push_color(&mut instances, 1.0f32, 1.0f32, 0.0f32, 1.0f32);
        // spout 2
        push_identity(&mut instances);
        push_color(&mut instances, 0.0f32, 1.0f32, 0.0f32, 1.0f32);
        push_scale_y(&mut instances, -1.0f32);
        push_color(&mut instances, 0.0f32, 0.0f32, 1.0f32, 1.0f32);

        Self {
            control_points,
            patches,
            instances,
        }
    }

    pub fn get_control_points_slice(&self) -> &[u8] {
        bytemuck::cast_slice(&self.control_points)
    }

    pub fn get_patches_slice(&self) -> &[u8] {
        bytemuck::cast_slice(&self.patches)
    }

    pub fn get_instances_slice(&self) -> &[u8] {
        bytemuck::cast_slice(&self.instances)
    }

    pub fn get_patch_point_count(&self) -> u32 {
        self.patches.len() as u32
    }
}

fn push_rotation_z(v: &mut Vec<f32>, ang_rad: f32) {
    v.push(ang_rad.cos());
    v.push(-ang_rad.sin());
    v.push(0.0f32);
    v.push(0.0f32);
    //
    v.push(ang_rad.sin());
    v.push(ang_rad.cos());
    v.push(0.0f32);
    v.push(0.0f32);
    //
    v.push(0.0f32);
    v.push(0.0f32);
    v.push(1.0f32);
    v.push(0.0f32);
    //
    v.push(0.0f32);
    v.push(0.0f32);
    v.push(0.0f32);
    v.push(1.0f32);
}

fn push_scale_y(v: &mut Vec<f32>, s: f32) {
    v.push(1.0f32);
    v.push(0.0f32);
    v.push(0.0f32);
    v.push(0.0f32);
    //
    v.push(0.0f32);
    v.push(s);
    v.push(0.0f32);
    v.push(0.0f32);
    //
    v.push(0.0f32);
    v.push(0.0f32);
    v.push(1.0f32);
    v.push(0.0f32);
    //
    v.push(0.0f32);
    v.push(0.0f32);
    v.push(0.0f32);
    v.push(1.0f32);
}

fn push_identity(v: &mut Vec<f32>) {
    v.push(1.0f32);
    v.push(0.0f32);
    v.push(0.0f32);
    v.push(0.0f32);
    //
    v.push(0.0f32);
    v.push(1.0f32);
    v.push(0.0f32);
    v.push(0.0f32);
    //
    v.push(0.0f32);
    v.push(0.0f32);
    v.push(1.0f32);
    v.push(0.0f32);
    //
    v.push(0.0f32);
    v.push(0.0f32);
    v.push(0.0f32);
    v.push(1.0f32);
}

fn push_color(v: &mut Vec<f32>, r: f32, g: f32, b: f32, a: f32) {
    v.push(r);
    v.push(g);
    v.push(b);
    v.push(a);
}
